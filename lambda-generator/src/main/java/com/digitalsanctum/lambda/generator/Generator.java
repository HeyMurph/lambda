package com.digitalsanctum.lambda.generator;

import com.digitalsanctum.lambda.Executor;
import com.squareup.javapoet.AnnotationSpec;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterSpec;
import com.squareup.javapoet.TypeSpec;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Properties;
import javax.lang.model.element.Modifier;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.QueryParam;

public class Generator {

    public static void main(String[] args) throws IOException {

        Path propsPath = Paths.get("/Users/shane.witbeck/projects/lambda/lambda-ws/src/main/resources/application.properties");
        Path endpointSrcPath = Paths.get("/Users/shane.witbeck/projects/lambda/lambda-ws/src/main/java");

        new Generator()
                .generateProperties(propsPath, "Hello", "com.digitalsanctum.lambda.samples.HelloWorld::hello", 3)
                .generateEndpointClass(endpointSrcPath, POST.class, "/hello", String.class, String.class);

        // todo assemble gateway app using lambda-ws as template
        // todo compile and package
        // todo create Docker image
    }

    private Generator generateProperties(Path propsFilePath, String name, String handler, int timeout) throws IOException {

        // todo generate properties file

        Properties props = new Properties();
        props.setProperty("lambda.name", name);
        props.setProperty("lambda.handler", handler);
        props.setProperty("lambda.timeout", Integer.toString(timeout));

        File propsDir = propsFilePath.getParent().toFile();
        if (!propsDir.exists()) {
            propsDir.mkdirs();
        }
        File f = propsFilePath.toFile();
        System.out.println("saving properties to: " + f.getAbsolutePath());
        props.store(new FileOutputStream(f), "Generated by " + getClass().getName());

        return this;
    }

    private Generator generateEndpointClass(Path endpointSrcPath,
                                            Class httpMethod,
                                            String resourcePath,
                                            Class inputType,
                                            Class returnType) throws IOException {
        FieldSpec executorField = FieldSpec.builder(Executor.class, "executor")
                .addModifiers(Modifier.PRIVATE)
                .addAnnotation(Autowired.class)
                .build();

        ParameterSpec paramSpec;
        if (httpMethod.equals(POST.class)) {
            paramSpec = ParameterSpec.builder(inputType, "input").build();

        } else if (httpMethod.equals(GET.class)) {
            paramSpec = ParameterSpec.builder(inputType, "input")
                    .addAnnotation(AnnotationSpec.builder(QueryParam.class)
                            .addMember("value", "$S", "input")
                            .build())
                    .build();
        } else {
            throw new IllegalArgumentException("unsupported http method " + httpMethod.getName());
        }

        MethodSpec messageMethod = MethodSpec.methodBuilder("message")
                .addAnnotation(httpMethod)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(paramSpec)
                .addException(Exception.class)
                .returns(returnType)
                .addStatement("return ($T) executor.execute(input).getResult()", returnType)
                .build();

        TypeSpec endpoint = TypeSpec.classBuilder("Endpoint")
                .addAnnotation(Component.class)
                .addAnnotation(AnnotationSpec.builder(javax.ws.rs.Path.class)
                        .addMember("value", "$S", resourcePath)
                        .build())
                .addModifiers(Modifier.PUBLIC)
                .addField(executorField)
                .addMethod(messageMethod)
                .build();

        JavaFile javaFile = JavaFile.builder("com.digitalsanctum.lambda.ws", endpoint)
                .build();

        javaFile.writeTo(System.out);
        javaFile.writeTo(endpointSrcPath);

        return this;
    }
}
